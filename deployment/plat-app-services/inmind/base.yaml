

# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: data-volume
# spec:
#   accessModes:
#     - ReadWriteOnce
#   storageClassName: microk8s-hostpath
#   resources:
#     requests:
#       storage: 10Gi

# ---

# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: db-data-volume
# spec:
#   accessModes:
#     - ReadWriteOnce
#   storageClassName: microk8s-hostpath
#   resources:
#     requests:
#       storage: 1Gi

# ---

# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mainapi-log-volume
# spec:
#   accessModes:
#     - ReadWriteOnce
#   storageClassName: microk8s-hostpath
#   resources:
#     requests:
#       storage: 100Mi

# ---

# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: broker-log-volume
# spec:
#   accessModes:
#     - ReadWriteOnce
#   storageClassName: microk8s-hostpath
#   resources:
#     requests:
#       storage: 100Mi

# ---

# # apiVersion: v1
# # kind: PersistentVolumeClaim
# # metadata:
# #   name: licence-volume
# # spec:
# #   accessModes:
# #     - ReadWriteOnce
# #   storageClassName: microk8s-hostpath
# #   resources:
# #     requests:
# #       storage: 100Mi

# # ---

# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: portainer-volume
# spec:
#   accessModes:
#     - ReadWriteOnce
#   storageClassName: microk8s-hostpath
#   resources:
#     requests:
#       storage: 1Gi


# ---


apiVersion: v1
kind: Service
metadata:
  labels:
    app: inmind
  name: quick-anomaly
spec:
  type: NodePort
  ports:
  - port: 35342
    targetPort: 35342
    nodePort: 35342
    #protocol: TCP
  selector:
    app: inmind

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: inmind
  name: reverseproxy
spec:
  type: NodePort
  ports:
  - port: 80
    #targetPort: 80
    nodePort: 35332
    #protocol: TCP
    name: httpreverse
  selector:
    app: inmind

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: inmind
  name: db
spec:
  type: NodePort
  ports:
  - port: 5432
    #targetPort: 5432
    nodePort: 35336
    #protocol: TCP
    name: http
  selector:
    app: inmind

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: inmind
  name: node-red
spec:
  type: NodePort
  ports:
  - port: 1880
    #targetPort: 1880
    nodePort: 35335
    #protocol: TCP
  selector:
    app: inmind

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: inmind
  name: localbroker
spec:
  type: NodePort
  ports:
  - name: mqtt
    port: 1883
    #targetPort: 1883
    nodePort: 35333
    #protocol: TCP
  - name: ws
    port: 8000
    #targetPort: 8000
    nodePort: 35334
    #protocol: TCP
  selector:
    app: inmind

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: inmind
  name: mainapi
spec:
  type: NodePort
  ports:
  - port: 5001
    #targetPort: 5001
    #protocol: TCP
  selector:
    app: inmind

# ---

# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     app: inmind
#   name: licence-manager-api
# spec:
#   type: NodePort
#   ports:
#   - name: httplicenceapi
#     port: 5002
#     #targetPort: 5002
#     nodePort: 35351
#     #protocol: TCP
#   - name: wslicenceapi
#     port: 5003
#     #targetPort: 5003
#     nodePort: 35352
#     #protocol: TCP
#   selector:
#     app: inmind

---


apiVersion: v1
kind: Service
metadata:
  labels:
    app: inmind
  name: licence-manager-gui
spec:
  type: NodePort
  ports:
  - port: 5227
    #targetPort: 5227
    nodePort: 35340
    #protocol: TCP
    name: httplicence
  selector:
    app: inmind

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: inmind
  name: dockermonitoring
spec:
  type: NodePort
  ports:
  - port: 8000
    #targetPort: 8000
    #protocol: TCP
    name: http1
  - port: 9443
    #targetPort: 9443
    #protocol: TCP
    name: http2
  - port: 9000
    #targetPort: 9000
    nodePort: 35350
    #protocol: TCP
    name: http3
  selector:
    app: inmind

---



# # Source: portainer/templates/service.yaml
# apiVersion: v1
# kind: Service
# metadata:
#   name: portainer
# spec:
#   type: NodePort
#   ports:
#     - port: 9000
#       targetPort: 9000
#       protocol: TCP
#       name: http
#       nodePort: 30777
#     - port: 9443
#       targetPort: 9443
#       protocol: TCP
#       name: https
#       nodePort: 30779      
#     - port: 30776
#       targetPort: 30776
#       protocol: TCP
#       name: edge
#       nodePort: 30776
#   selector:
#     app: portainer

# ---

# kind: ClusterRoleBinding
# metadata:
#   name: portainer
#   labels:
#     app.kubernetes.io/name: portainer
#     app.kubernetes.io/instance: portainer
#     app.kubernetes.io/version: "ce-latest-ee-2.19.4"
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: cluster-admin
# subjects:
# - kind: ServiceAccount
#   namespace: portainer
#   name: portainer-sa-clusteradmin

# ---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: inmind
  name: inmind
spec:
  replicas: 1
  selector:
    matchLabels:
      app: inmind
  template:
    metadata:
      labels:
        app: inmind
    spec:
      imagePullSecrets:
        - name: my-registry-secret
      containers:
      - name: quick-anomaly
        image: inventio.azurecr.io/modules/quick-anomaly-torch-onnx-x86-cuda-113:dev
        ports:
        - containerPort: 35342
        volumeMounts:
        - name: data-volume
          mountPath: /storage
          subPath: storage
        # resources:
        #   limits:
        #     nvidia.com/gpu: 1
        
      - name: reverseproxy
        image: inventio.azurecr.io/iapp-quickanomaly/reverseproxy-x86:dev
        ports:
        - containerPort: 80
          name: httpreverse
        volumeMounts:
        - name: data-volume
          mountPath: /serversdata
          subPath: storage

      - name: db
        image: inventio.azurecr.io/core/db:dev
        env:
        - name: "POSTGRES_USER"
          value: "postgres"
        - name: "POSTGRES_PASSWORD"
          value: "P@ssw0rd1!"    
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata      
        ports:
        - containerPort: 5432
          name: http
        volumeMounts:
        - name: db-data-volume
          mountPath: /var/lib/postgresql/data

      - name: node-red
        image: inventio.azurecr.io/core/flow:dev
        ports:
        - containerPort: 1880

      - name: localbroker
        image: inventio.azurecr.io/core/brokermosquitto:dev
        ports:
        - containerPort: 1883
          name: mqtt
        - containerPort: 8000
          name: ws
        volumeMounts:
        - name: broker-log-volume
          mountPath: /mosquitto/log

      - name: mainapi
        imagePullPolicy: Always
        image: inventio.azurecr.io/core/api:dev
        ports:
        - containerPort: 5001
        volumeMounts:
        - name: mainapi-log-volume
          mountPath: /log
        - name: data-volume
          mountPath: /data
          subPath: storage
        # - name: docker-sock
        #   mountPath: /var/run/docker.sock

      # - name: dockermonitoring
      #   image: inventio.azurecr.io/core/dockermonitoring:dev
      #   ports:
      #   # - containerPort: 8000
      #   #   name: http1
      #   - containerPort: 9443
      #     name: http2
      #   - containerPort: 9000
      #     name: http3
      #   # volumeMounts:
      #   # - name: docker-sock
      #   #   mountPath: /var/run/docker.sock

      - name: licence-manager-gui
        image: inventio.azurecr.io/edge-licence-manager/reverseproxy-gui-kitt4sme-x86:dev
        ports:
        - containerPort: 5227
          name: httplicence

      # - name: licence-manager-api
      #   image: inventio.azurecr.io/edge-licence-manager/api-x86:dev
      #   ports:
      #   - containerPort: 5002
      #     name: httplicenceapi
      #   - containerPort: 5003
      #     name: wslicenceapi
      #   volumeMounts:
      #   - name: licence-volume
      #     mountPath: /licence
      #   - name: data-volume
      #     mountPath: /data
        # - name: docker-sock
        #   mountPath: /var/run/docker.sock

      # - name: portainer
      #   image: "inventio.azurecr.io/core/dockermonitoring:dev"
      #   args:
      #   - '--tunnel-port=30776'          
      #   volumeMounts:
      #     - name: portainer-data-volume
      #       mountPath: /data              
      #   ports:
      #     - name: http
      #       containerPort: 9000
      #       protocol: TCP
      #     - name: https
      #       containerPort: 9443
      #       protocol: TCP              
      #     - name: tcp-edge
      #       containerPort: 8000
      #       protocol: TCP              
      #   livenessProbe:
      #     httpGet:
      #       path: /
      #       port: 9443
      #       scheme: HTTPS
      #   readinessProbe:
      #     httpGet:
      #       path: /
      #       port: 9443
      #       scheme: HTTPS
      #   resources:
      #     {}

      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: data-volume
      - name: db-data-volume
        persistentVolumeClaim:
          claimName: db-data-volume
      - name: mainapi-log-volume
        persistentVolumeClaim:
          claimName: mainapi-log-volume
      - name: broker-log-volume
        persistentVolumeClaim:
          claimName: broker-log-volume
      # - name: licence-volume
      #   persistentVolumeClaim:
      #     claimName: licence-volume
      - name: "portainer-data-volume"
        persistentVolumeClaim:
          claimName: portainer-volume

---




# ---
# # Source: portainer/templates/namespace.yaml
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: portainer
# ---
# # Source: portainer/templates/serviceaccount.yaml
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: portainer-sa-clusteradmin
#   namespace: portainer
#   labels:
#     app.kubernetes.io/name: portainer
#     app.kubernetes.io/instance: portainer
#     app.kubernetes.io/version: "ce-latest-ee-2.19.4"
# ---
# # Source: portainer/templates/pvc.yaml
# kind: "PersistentVolumeClaim"
# apiVersion: "v1"
# metadata:
#   name: portainer
#   namespace: portainer  
#   annotations:
#     volume.alpha.kubernetes.io/storage-class: "generic"
#   labels:
#     io.portainer.kubernetes.application.stack: portainer
#     app.kubernetes.io/name: portainer
#     app.kubernetes.io/instance: portainer
#     app.kubernetes.io/version: "ce-latest-ee-2.19.4"
# spec:
#   accessModes:
#     - "ReadWriteOnce"
#   resources:
#     requests:
#       storage: "10Gi"
# ---
# # Source: portainer/templates/rbac.yaml
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: portainer
#   labels:
#     app.kubernetes.io/name: portainer
#     app.kubernetes.io/instance: portainer
#     app.kubernetes.io/version: "ce-latest-ee-2.19.4"
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: cluster-admin
# subjects:
# - kind: ServiceAccount
#   namespace: portainer
#   name: portainer-sa-clusteradmin
# ---
# # Source: portainer/templates/service.yaml
# apiVersion: v1
# kind: Service
# metadata:
#   name: portainer
#   namespace: portainer
#   labels:
#     io.portainer.kubernetes.application.stack: portainer
#     app.kubernetes.io/name: portainer
#     app.kubernetes.io/instance: portainer
#     app.kubernetes.io/version: "ce-latest-ee-2.19.4"
# spec:
#   type: NodePort
#   ports:
#     - port: 9000
#       targetPort: 9000
#       protocol: TCP
#       name: http
#       nodePort: 30777
#     - port: 9443
#       targetPort: 9443
#       protocol: TCP
#       name: https
#       nodePort: 30779      
#     - port: 30776
#       targetPort: 30776
#       protocol: TCP
#       name: edge
#       nodePort: 30776
#   selector:
#     app.kubernetes.io/name: portainer
#     app.kubernetes.io/instance: portainer
# ---
# # Source: portainer/templates/deployment.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: portainer
#   namespace: portainer
#   labels:
#     io.portainer.kubernetes.application.stack: portainer
#     app.kubernetes.io/name: portainer
#     app.kubernetes.io/instance: portainer
#     app.kubernetes.io/version: "ce-latest-ee-2.19.4"
# spec:
#   replicas: 1
#   strategy:
#     type: "Recreate"
#   selector:
#     matchLabels:
#       app.kubernetes.io/name: portainer
#       app.kubernetes.io/instance: portainer
#   template:
#     metadata:
#       labels:
#         app.kubernetes.io/name: portainer
#         app.kubernetes.io/instance: portainer
#     spec:
#       nodeSelector:
#         {}
#       serviceAccountName: portainer-sa-clusteradmin
#       volumes:
#         - name: "data"
#           persistentVolumeClaim:
#             claimName: portainer
#       containers:
#         - name: portainer
#           image: "portainer/portainer-ce:2.19.4"
#           imagePullPolicy: Always
#           args:
#           - '--tunnel-port=30776'          
#           volumeMounts:
#             - name: data
#               mountPath: /data              
#           ports:
#             - name: http
#               containerPort: 9000
#               protocol: TCP
#             - name: https
#               containerPort: 9443
#               protocol: TCP              
#             - name: tcp-edge
#               containerPort: 8000
#               protocol: TCP              
#           livenessProbe:
#             httpGet:
#               path: /
#               port: 9443
#               scheme: HTTPS
#           readinessProbe:
#             httpGet:
#               path: /
#               port: 9443
#               scheme: HTTPS
#           resources:
#             {}