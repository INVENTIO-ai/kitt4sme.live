apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
    }

    http {
        server {
            client_max_body_size        20000M;
            proxy_connect_timeout       600;
            proxy_send_timeout          600;
            proxy_read_timeout          600;
            send_timeout                600;

            listen 80;

            access_log /var/log/nginx/port80.com.access.log;
            error_log /var/log/nginx/port80.com.error.log;

            location /mainapi/ {
                proxy_pass http://mainapi:5001/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
    }

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: reverseproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reverseproxy
  template:
    metadata:
      labels:
        app: reverseproxy
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: data-volume
          mountPath: /serversdata
          subPath: Storage
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: data-volume  # Update this with your PVC name

---

apiVersion: v1
kind: Service
metadata:
  name: reverseproxy
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 35332
  selector:
    app: reverseproxy

---

apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: reverseproxy-virtual-service
spec:
  hosts:
    - "reverseproxy"
  http:
    - match:
        - uri:
            prefix: "/mainapi"
      rewrite:
        uri: "/"
      route:
        - destination:
            host: reverseproxy
            port:
              number: 80


# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: mainapi-ingress
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /$1
#     nginx.ingress.kubernetes.io/use-regex: "true"
# spec:
#   ingressClassName: nginx
#   rules:
#   - http:
#       paths:
#       - path: /mainapi/(.*)
#         pathType: Prefix
#         backend:
#           service:
#             name: mainapi
#             port:
#               number: 5001
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: ingress-nginx-nodeport
# spec:
#   type: NodePort
#   ports:
#     - port: 80
#       nodePort: 35332
#       protocol: TCP
#       targetPort: 80
#   selector:
#     app.kubernetes.io/name: ingress-nginx
#     app.kubernetes.io/part-of: ingress-nginx

